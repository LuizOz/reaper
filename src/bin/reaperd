#!/usr/bin/python -u
import ConfigParser
import os
import re
import sched
import sys
import syslog
import time
import yaml
import importlib

from datetime import datetime
from reaper import cgroups

syslog.openlog('reaperd', syslog.LOG_PID, syslog.LOG_SYSLOG)

try:
    config = ConfigParser.RawConfigParser()
    config.read('/etc/reaper.cfg')
    plugin  = config.get('daemon', 'plugin')
    check   = config.getint('daemon', 'interval')
    bufferf = config.get('daemon', 'buffer')
    debug   = config.get('daemon', 'debug')
    memory  = config.get('limits', 'memory')
    cores   = config.get('limits', 'cores')
except Exception:
    syslog.syslog(syslog.LOG_ERR, 'Problems reading reaper configuration')
    sys.exit(-1)

def output(message):
    print('%s  %s' % (str(datetime.now()), message))

def startup_checks():
    with open('/proc/cpuinfo', 'r') as f:
        cpuinfo = f.read()
        for core in cores.split(','):
            if not re.search('processor.*?:?%s' % core, cpuinfo):
                syslog.syslog(syslog.LOG_ERR,
                              'Processor cores not available, check configuration file')
                sys.exit(1)

    cgmodules = cgroups.CGroups.cgstate()
    for controller in cgroups.CGroups.controllers:
        if cgmodules[controller] == 0:
            syslog.syslog(syslog.LOG_ERR,
                          'Cgroups module is not enabled in kernel (%s)' % controller)
            sys.exit(2)

    with open(bufferf, 'w') as f:
        f.write(yaml.dump([]))
    if debug: output('Buffer file cleared')

def gupdate(users):
    cgroups.CGroups.update(users, cores, memory)
    if debug: output('Control groups updated')

def verify(sc):
    try:
        if debug: output('Checking resellers and system users')
        collect = importlib.import_module('reaper.collectors.%s' % plugin)
        users = collect.collect()
    except AttributeError:
        syslog.syslog(syslog.LOG_ERR,
                      'Collector not found, check configuration file')
        sys.exit(2)

    try:
        with open(bufferf, 'r') as f:
            state = yaml.load(f.read())
    except IOError:
        with open(bufferf, 'w') as fw:
            fw.write(yaml.dump({}))
        with open(bufferf, 'r') as fr:
            state = yaml.load(fr.read())

    if state != users:
        gupdate(users)
        with open(bufferf, 'w') as f:
            f.write(yaml.dump(users))
        if debug: output('Buffer file updated')
    sc.enter(check, 1, verify, (sc,))

if __name__ == '__main__':
    startup_checks()
    s = sched.scheduler(time.time, time.sleep)
    s.enter(check, 1, verify, (s,))
    syslog.syslog(syslog.LOG_INFO, 'Starting reaperd scheduled checks')
    s.run()
