#!/usr/bin/python -u

import ConfigParser
import os
import re
import sched
import sys
import syslog
import time
import yaml

from datetime import datetime
from reaper import cgroups
from reaper import collectors


syslog.openlog('reaperd', syslog.LOG_PID, syslog.LOG_SYSLOG)

config = ConfigParser.RawConfigParser()
config.read('/etc/reaper.cfg')
plugin  = config.get('daemon', 'plugin')
check   = config.getint('daemon', 'interval')
bufferf = config.get('daemon', 'buffer')
debug   = config.get('daemon', 'debug')
memory  = config.get('limits', 'memory')
cores   = config.get('limits', 'cores')

def output(message):
    print('%s  %s' % (str(datetime.now()), message))

def startup_checks():
    cpuinfo = open('/proc/cpuinfo', 'r').read()
    for core in cores.split(','):
        if not re.search('processor.*?:?%s' % core, cpuinfo):
            syslog.syslog(syslog.LOG_ERROR,
                          'Processor cores not available, check configuration file')
            sys.exit(1)

    open(bufferf, 'w').write(yaml.dump([]))
    if debug: output('Buffer file cleared')

def gupdate(users):
    cgroups.update(users, cores, memory)
    if debug: output('Control groups updated')

def verify(sc):
    try:
        if debug: output('Checking resellers and system users')
        collect = getattr(collectors, plugin)
        users = collect()
    except AttributeError:
        syslog.syslog(syslog.LOG_ERR,
                      'Collector not found, check configuration file')
        sys.exit(2)

    try:
        state = yaml.load(open(bufferf, 'r').read())

    except IOError:
        open(bufferf, 'w').write(yaml.dump({}))
        state = yaml.load(open(bufferf, 'r').read())

    if state != users:
        gupdate(users)
        open(bufferf, 'w').write(yaml.dump(users))
        if debug: output('Buffer file updated')

    sc.enter(check, 1, verify, (sc,))

if __name__ == '__main__':
    startup_checks()
    s = sched.scheduler(time.time, time.sleep)
    s.enter(check, 1, verify, (s,))
    syslog.syslog(syslog.LOG_INFO, 'Starting reaperd scheduled checks')
    s.run()
