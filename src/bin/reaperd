#!/usr/bin/python -u

import ConfigParser
import os
import sched
import sys
import time
import yaml

from reaper import cgroups
from reaper import collectors


def get_configuration():
    config = ConfigParser.RawConfigParser()
    config.read('/etc/reaper.cfg')

    plugin = config.get('daemon', 'plugin')
    check = config.getint('daemon', 'interval')
    bufferf = config.get('daemon', 'buffer')
    debug = config.get('daemon', 'debug')
    memory = config.get('limits', 'memory')
    cores = config.get('limits', 'cores')
    ememory = config.get('overlimit', 'memory')

def gupdate():
    """ Update control groups on server
    """
    users = yaml.load(open(bufferf, 'r').read())
    cgroups.update_rules(users, cores, memory, ememory)
    if debug: print('Control groups updated')

def verify(sc):
    """ Periodically verify system changes
    """
    try:
        collect = getattr(collectors, plugin)
        users = collect()
        last_state = yaml.load(open(bufferf, 'r').read())
    except AttributeError:
        print('Collector not found, exiting.')
        sys.exit(1)
    except IOError:
        open(bufferf, 'w').write('')
        last_state = yaml.load(open(bufferf, 'r').read())

    if last_state != users:
        open(bufferf, 'w').write(yaml.dump(users))
        if debug: print('Buffer file updated')
        gupdate()
        if debug: print('Linux control groups updated')

    sc.enter(check, 1, verify, (sc,))

if __name__ == '__main__':
    s = sched.scheduler(time.time, time.sleep)
    s.enter(check, 1, verify, (s,))
    if debug: print('Starting reaper scheduled checks')
    s.run()
