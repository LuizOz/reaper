#!/usr/bin/python

import ConfigParser
import optparse
import psutil
import os
import time
import sys


def get_resources(username):
    rulesf = open('/etc/cgrules.conf', 'r').read()
    for line in rulesf.splitlines():
        if username == line.split()[0]:
            rules = line.split()

    try:
        group = rules[2]
    except UnboundLocalError:
        print('[Error] User not found on resource control groups')
        sys.exit(1)

    cpu_cores = open('/cgroup/cpuset/%s/cpuset.cpus' % group, 'r').read()
    cpu_tasks = open('/cgroup/cpuset/%s/tasks' % group, 'r').readlines()
    mem_tasks = open('/cgroup/memory/%s/tasks' % group, 'r').readlines()
    mem_usage = open('/cgroup/memory/%s/memory.usage_in_bytes' % group, 'r').read()
    mem_limit = open('/cgroup/memory/%s/memory.limit_in_bytes' % group, 'r').read()

    mem_usage = int(mem_usage.strip())
    mem_limit = int(mem_limit.strip())

    cpuacct_usage = open('/cgroup/cpuacct/%s/cpuacct.stat' % group, 'r').read()
    cpuacct_usage_usr = cpuacct_usage.splitlines()[0].split()[1]
    cpuacct_usage_sys = cpuacct_usage.splitlines()[1].split()[1]
    cpuacct_usage_total = int(cpuacct_usage_usr) + int(cpuacct_usage_sys)
    cpuacct_mtime = os.stat('/cgroup/cpuacct/%s/cpuacct.stat' % group).st_mtime
    
    cpu_tasklist = []
    mem_tasklist = []

    for task in cpu_tasks:
        cpu_tasklist.append(task.strip())
    for task in mem_tasks:
        mem_tasklist.append(task.strip())
    
    resources = {'group': group,
                 'controllers': rules[1].split(','),
                 'cores': cpu_cores.strip(),
                 'cpu_tasks': cpu_tasklist,
                 'mem_tasks': mem_tasklist,
                 'memory_usage': mem_usage,
                 'memory_limit': mem_limit,
                 'cpuacct_mtime': cpuacct_mtime,
                 'cpuacct_usr': cpuacct_usage_usr,
                 'cpuacct_sys': cpuacct_usage_sys,
                 'cpuacct_total': cpuacct_usage_total
    }

    return resources

def b2mb(value):
    return ((value / 1024) / 1024)

def getshellcolor(value):
    if value >= 0 and value < 60:
        color = '\033[32m'
    elif value > 60 and value < 80:
        color = '\033[33m'
    elif value > 80:
        color = '\033[31m'
    else:
        color = '\033[0m'
    return color

def pretty_print(username, tasks):
    resources = get_resources(username)
    memusage = ((resources['memory_usage'] * 100) / float(resources['memory_limit']))
    cpuusage = float(psutil.cpu_percent(percpu=True)[int(resources['cores'])])
    now = time.time()
    cpuaccount = ((resources['cpuacct_total'] / 100) * 100) / now

    mcolor = getshellcolor(memusage)
    ccolor = getshellcolor(cpuusage)
    ecolor = getshellcolor(-1)
    acolor = getshellcolor(cpuaccount)
    
    print('\n UID: %s    Cgroup: %s    %s' % (username,
                                              resources['group'],
                                              resources['controllers'])
    )
    print('\n CPU assigned core id\'s: %s' % resources['cores'])
    print(' CPU%s usage: ' % resources['cores'] + ccolor +
          '%.2f%%' % (cpuusage) + ecolor)
    print('\n CPU accounting: ' + acolor +
          '%.5f%%' % cpuaccount + ecolor)
    print('\n Memory limit: %sMB\n' % b2mb(resources['memory_limit']) +
          ' Memory usage: ' + mcolor +
          '%sMB (%.2f%%)' % (b2mb(resources['memory_usage']),
                             memusage) + ecolor)
    print(' Active tasks: %s\n' % len(resources['mem_tasks']))

    if tasks or extended:
        print(' Processes: %s\n' % resources['mem_tasks'])

    if extended:
        print(' Extended process information:\n')
        for task in resources['mem_tasks']:
            tname = open('/proc/%s/comm' % task).read()
            print(' %s\t%s' % (task,
                              tname.strip()))
        print('')

def short_print(username):
    resources = get_resources(username)
    print('uid=%s '
          'cgroup=%s '
          'cores=%s '
          'jiffy=%s '
          'memory=%s '
          'tasks=%s ' %
          (username,
           resources['group'],
           resources['cores'],
           resources['cpuacct_total'],
           resources['memory_usage'],
           len(resources['mem_tasks']))
      )

desc = "Get user's resource usage"
usage = "usage: %prog [options] username"
parser = optparse.OptionParser(description=desc, usage=usage)

parser.add_option('-t', '--tasks',
                  help='list active processes',
                  action='store_true')

parser.add_option('-s', '--short',
                  help='print short output (script processing)',
                  action='store_true')

parser.add_option('-e', '--extended',
                  help='print extended information',
                  action='store_true')
                  
(opts, args) = parser.parse_args()

if len(args) is 0:
    print '\n -- Destination user is missing\n'
    parser.print_help()
    exit(-1)

if opts.tasks:
    showtasks = True
else:
    showtasks = False

if opts.extended:
    extended = True
else:
    extended = False

if opts.short:
    if showtasks or extended:
        sys.stderr.write('WARNING: Option -t and -e not available with -s\n')
    short_print(args[0])
else:
    pretty_print(args[0], showtasks)


